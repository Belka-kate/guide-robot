#include <Servo.h>
#include <math.h>
Servo rotate;

//define for timer
#define ROUTE_PERIOD 1
uint32_t tmr_route;
#define BUTTON_PERIOD 1
uint32_t tmr_button;
#define ULTRASOUND_PERIOD 1
uint32_t tmr_ultrasound;
#define TRAFFICLIGHT_PERIOD 100
uint32_t tmr_trafficlight;

int count_route = 1; //for following the route
int counter = 0; //inner
int move;
int turn;

//books for logic of working
bool end_route = false;
bool press_button = false;
bool obstacle = false;
bool red_color = false;
bool sound = false;//for sound with obstacles
bool sound1 = false;//for sound with traffic lights

//things for corect turning
int R1 = 39;
int R2 = 39;
float step = 0.525;
String data;

//create path by angle distance angle...
double way[] = {0, 1000, 0};

//pins for motors
int encoder = 49;


int motor11 = 41;
int motor12 = 39;
int motor21 = 37;
int motor22 = 35;


int ena1 = 4; //speed
int enb1 = 5;


int motor31 = 8;
int motor32 = 9;
int motor42 = 10;
int motor41 = 11;


int ena2 = 6;
int enb2 = 3;

int pin_res = A0; //потенциометр для регулирвока скорости

int trigPin5 = 30; //for obstacles
int echoPin5 = 31;
int trigPin1 = 30;
int echoPin1 = 31;

int trigPin3 = 29;
int echoPin3 = 28;
int trigPin4 = 27;
int echoPin4 = 26;
int trigPin2 = 30;
int echoPin2 = 31;


int button = 12;
int piezo = 13;


void setup() {
  Serial.begin(9600);

  //set up mode for everything
  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);
  pinMode(trigPin3, OUTPUT);
  pinMode(echoPin3, INPUT);
  pinMode(trigPin4, OUTPUT);
  pinMode(echoPin4, INPUT);
  pinMode(trigPin5, OUTPUT);
  pinMode(echoPin5, INPUT);
  pinMode(motor11, OUTPUT);
  pinMode(motor12, OUTPUT);
  pinMode(motor21, OUTPUT);
  pinMode(motor22, OUTPUT);
  pinMode(motor31, OUTPUT);
  pinMode(motor32, OUTPUT);
  pinMode(motor41, OUTPUT);
  pinMode(motor42, OUTPUT);
  pinMode(ena1, OUTPUT);
  pinMode(enb1, OUTPUT);
  pinMode(ena2, OUTPUT);
  pinMode(enb2, OUTPUT);
  pinMode(encoder, INPUT);
  pinMode(button, INPUT_PULLUP);

  rotate.attach(2);

  analogWrite(ena1, 130);
  analogWrite(enb1, 130);
  analogWrite(ena2, 130);
  analogWrite(enb2, 130);

  //remaking way for better understanding
  for (int i = 0; i <= sizeof(way) / sizeof(way[0]) - 1; i += 1) {
    if (i % 2 == 1) {
      way[i] = way[i] - extra_angel(way[i - 1]) - extra_angel(way[i + 1]);
    } else {
      if (way[i + 1] < 0) {
        way[i] = R1 * radians(-1 * way[i]);
      }
      else {
        way[i] = R2 * radians(way[i]);
      }
    }
  }

  //wait for sign to start, settings to start and start moving
  press_button = true;
  turning(2);
  Serial.println(rotate.read());

  while (digitalRead(button) == 0) {
    delay(0);
  }
  start_motor(3);
}

void loop() {
  change_speed(); //changing speed according to the значения потенциометр
  //main function of driving and turning if it is reqeured
  //функция езды по маршруту работает при условии зажатой кнопкиб незаконченного маршрута,отсутствия препятствий и светофора
  if (millis() - tmr_route >= ROUTE_PERIOD and end_route == false and press_button == true /*and obstacle == false and red_color == false*/) {
    if (Serial.  available() > 0) {
      data = Serial.readStringUntil('\n');
      Serial.print("You sent me: ");
      Serial.println(data);
    }
    // 3 - forward 1 - backward 2 - stop
    //1 - left 2 - forward 3 - right
    if(data[0] == "3"){
      move = 3;
    }else if(data[0]=="1"){
      move = 1;
    }else{
      move = 2;
    }

    if(data[2] == "3"){
      turn = 3;
    }else if(data[2]=="1"){
      turn = 1;
    }else{
      turn = 2;
    } 
    turning(turn);
    start_motor(move);
  }


  //function for checking is button held or not
  //функция проверки кнопки работает при незаконченном маршруте
  if (millis() - tmr_button >= BUTTON_PERIOD and end_route == false) {
    tmr_button = millis();
    if (!digitalRead(button) == 0) {
      press_button = false;
      start_motor(2);
      //turning(0);
      tone(piezo, 1000);
    } else {
      press_button = true;
      start_motor(move);
      noTone(piezo);

    }
  }
  //function for avoiding obstacles
  //функция обнаружения препятствий работает при зажатой кнопкиб незаконченного маршрута
   if (millis() - tmr_ultrasound >= ULTRASOUND_PERIOD and end_route == false and press_button == true) {
     tmr_ultrasound = millis();
     if (Ultrasound(trigPin3, echoPin3) > 100) {
       obstacle = false;
       sound = false;
       start_motor(move);
     } else {
       obstacle = true;
       start_motor(2);
       if (sound == false) {
         tone(piezo, 1500, 500);
         sound = true;
       }
     }
    }
  
}

//remaking angle to the suitable format
double extra_angel(double a) {
  double r;
  if (a < 0) {
    r = 48;
    a = a * -1;
  }
  else {
    r = 31;
  }
  //in sm
  a = radians(a) / 2;
  return r * tan(a);
}

//function for controlling engines

//3 - forward 1 - backward 2 - stop
void start_motor(int back_or_not) {
  int a, b;
  if (back_or_not == 1) {
    a = 0;
    b = 1;
  }
  else if (back_or_not == 3) {
    b = 0;
    a = 1;
  }
  else {
    a = 0;
    b = 0;
  }
  digitalWrite(motor12, a);
  digitalWrite(motor11, b);
  digitalWrite(motor22, a);
  digitalWrite(motor21, b);
  digitalWrite(motor32, a);
  digitalWrite(motor31, b);
  digitalWrite(motor42, a);
  digitalWrite(motor41, b);
}

//function for turning

//1 - left 80 2 - forward 110 3 - right 140
void turning(int where) {
  if (where == 1) {
    rotate.write(80);
  } else if (where == 2) {
    rotate.write(110);
  } else {
    rotate.write(140);
  }
}

//checking by encoder how the path goes
void encoder_work(int counter) {
  int flag = digitalRead(encoder);
  while (flag == digitalRead(encoder)) {
    delay(0);
  }
  counter += 1;
  return;
}


//считывание значений с ультразвука и перевод в см
int Ultrasound(int trigPin, int echoPin) {
  int duration, distance;
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2); 
  digitalWrite(trigPin, HIGH);

  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  Serial.println(millis());
  duration = pulseIn(echoPin, HIGH); 
  distance = duration / 58;

  Serial.println(millis());
  return distance;
}

void change_speed() { // считывает значение с потенциометра, преобразует его в нужный формат и
  //меняет скорость у всех моторов
  int res = analogRead(pin_res);
  int sp = map(res, 0, 1023, 0, 255);
  analogWrite(ena1, sp);
  analogWrite(ena2, sp);
  analogWrite(enb1, sp);
  analogWrite(enb2, sp);
}
